#!/usr/bin/python
from optparse import OptionParser

def Diff(idle_log, action_log): # finds in order diff
    action_info = _process(open(action_log, 'r'))
    action_set = set(action_info)
    idle_set = set(_process(open(idle_log, 'r')))
    uniques = action_set - action_set.intersection(idle_set)
    order = sorted([action_info.index(item) for item in uniques])
    return [action_info[idx] for idx in order]

def _process(log_file): # puts relevant fields in tuples
    info = list()
    for line in log_file:
        if "Index" in line:
            continue
        fields = [item.strip() for item in line.split(',')]
        try:
            info.append(tuple([fields[3], fields[4], fields[5], fields[6]]))
        except Exception:
            pass # deals with random garbage USB-CANII puts in log

    return info

def _code_gen(diff, insert_waits): # prints C code for writing the diff over CAN
    print 'TxMessage.IDE = CAN_Id_Extended;\r'
    print 'TxMessge.RTR = CAN_RTR_Data; \r'
    for item in diff:
        print 'TxMessage.ExtId = %s;\r' % item[1]
        print 'TxMessage.DLC = %s;\r' % item[2]
        data = item[3].split('  ')
        i = 0
        for hexNum in data:
            print 'TxMessage.Data[%s] = 0x%s;\r' % (i, hexNum)
            i += 1
        print 'CAN_Transmit(CANx, &TxMessage);\r'
	if insert_waits:
		print 'waitForPress();\r'
	print 'Delay();Delay();Delay(); // jank\r'
        print '\r\n' # newlines in Windows format :(

if __name__ == '__main__':
    parser = OptionParser()
    parser.add_option('-c', '--code-gen', action='store_true',
            default=False, dest='do_codegen', 
            help='generate C code for STM32 boards')
    parser.add_option('-w', '--insert-waits', action='store_true',
	    default=False, dest='insert_waits',
	    help='if doing code gen, inserts waitForKey() after cmds')
    parser.add_option('-i', '--idle-log', dest='idle_log',
            help='contains frames generated when car is idling')
    parser.add_option('-a', '--action-log', dest='action_log',
            help='contains frames generated when car does action we want to '\
            'reverse engineer')
    (options, args) = parser.parse_args()

    diff = Diff(options.idle_log, options.action_log)

    if options.do_codegen:
        _code_gen(diff, options.insert_waits)

    else:
        print 'Frames in action log file that are not in idle log file:'
        for item in diff:
            print item
